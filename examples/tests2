import time

import numpy as np
from matplotlib import pyplot as plt
import xobjects as xo
import xtrack as xt
import xfields as xf
import xpart as xp

context = xo.ContextCpu(omp_num_threads=0)

####################
# Pipeline manager #
####################
pipeline_manager = xt.PipelineManager()
pipeline_manager.add_particles('b1',0)
pipeline_manager.add_particles('b2',0)
pipeline_manager.add_element('IP1')

shift = np.sqrt(18)
#################################
# Generate particles            #
#################################

p0c = 7000e9
n_macroparticles = int(500)
bunch_intensity = 1.15e11
physemit_x = (3.75E-6*xp.PROTON_MASS_EV)/p0c 
physemit_y = (3.75E-6*xp.PROTON_MASS_EV)/p0c 
beta_x_IP1 = 0.55
beta_y_IP1 = 0.55
beta_x_IP2 = 0.55
beta_y_IP2 = 0.55
sigma_z = 0.08
sigma_delta = 1E-4
beta_s = sigma_z/sigma_delta
Qx = 62.31
Qy = 60.32
Qs = 2.1E-3
p0c = 7000e9

print('Initialising particles')

particles_b1 = xp.Particles(_context=context,
    p0c=p0c,
    x=np.sqrt(physemit_x*beta_x_IP1)*(np.random.randn(n_macroparticles)),
    px=np.sqrt(physemit_x/beta_x_IP1)*np.random.randn(n_macroparticles),
    y=np.sqrt(physemit_y*beta_y_IP1)*(np.random.randn(n_macroparticles)),
    py=np.sqrt(physemit_y/beta_y_IP1)*np.random.randn(n_macroparticles),
    zeta=sigma_z*np.random.randn(n_macroparticles),
    delta=sigma_delta*np.random.randn(n_macroparticles),
    weight=bunch_intensity/n_macroparticles
)
particles_b1.init_pipeline('b1')
particles_b2 = xp.Particles(_context=context,
    p0c=p0c,
    x=np.sqrt(physemit_x*beta_x_IP1)*(np.random.randn(n_macroparticles)),
    px=np.sqrt(physemit_x/beta_x_IP1)*np.random.randn(n_macroparticles),
    y=np.sqrt(physemit_y*beta_y_IP1)*(np.random.randn(n_macroparticles)),
    py=np.sqrt(physemit_y/beta_y_IP1)*np.random.randn(n_macroparticles),
    zeta=sigma_z*np.random.randn(n_macroparticles),
    delta=sigma_delta*np.random.randn(n_macroparticles),
    weight=bunch_intensity/n_macroparticles
)
particles_b2.init_pipeline('b2')

#############
# Beam-beam #
#############
slicer = xf.TempSlicer(sigma_z=sigma_z, n_slices=1, mode = 'shatilov')
config_for_update_b1_IP1=xf.ConfigForUpdateBeamBeamBiGaussian3D(
   pipeline_manager=pipeline_manager,
   element_name='IP1',
   partner_particles_name = 'b2',
   slicer=slicer,
   update_every=1
   )
config_for_update_b2_IP1=xf.ConfigForUpdateBeamBeamBiGaussian3D(
   pipeline_manager=pipeline_manager,
   element_name='IP1',
   partner_particles_name = 'b1',
   slicer=slicer,
   update_every=1
   )

print('build bb elements...')
bbeamIP1_b1 = xf.BeamBeamBiGaussian3D(
            _context=context,
            other_beam_q0 = particles_b2.q0,
            phi = 0,alpha=0,
            config_for_update = config_for_update_b1_IP1,
            ref_shift_x = shift*np.sqrt(physemit_x*beta_x_IP1)/2)
bbeamIP1_b2 = xf.BeamBeamBiGaussian3D(
            _context=context,
            other_beam_q0 = particles_b1.q0,
            phi = 0,alpha=0,
            config_for_update = config_for_update_b2_IP1,
            ref_shift_x = shift*np.sqrt(physemit_x*beta_x_IP1)/2)



#################################################################
# arcs (here they are all the same with half the phase advance) #
#################################################################

arc = xt.LineSegmentMap(
        betx = beta_x_IP1,bety = beta_y_IP1,
        qx = Qx, qy = Qy,bets = beta_s, qs=Qs)

#################################################################
# Tracker                                                       #
#################################################################

elements_b1 = [bbeamIP1_b1,arc]
elements_b2 = [bbeamIP1_b2,arc]
line_b1 = xt.Line(elements=elements_b1)
line_b2 = xt.Line(elements=elements_b2)
line_b1.build_tracker()
line_b2.build_tracker()
branch_b1 = xt.PipelineBranch(line_b1,particles_b1)
branch_b2 = xt.PipelineBranch(line_b2,particles_b2)
multitracker = xt.PipelineMultiTracker(branches=[branch_b1,branch_b2])

#################################################################
# Tracking                                                      #
#################################################################
print('Tracking...')
time0 = time.time()
nTurn = 100
multitracker.track(num_turns=nTurn,turn_by_turn_monitor=True)
print('Done with tracking.',(time.time()-time0)/16384,'[s/turn]')

#################################################################
# Post-processing: raw data and spectrum                        #
#################################################################


positions_x_b1 = np.average(line_b1.record_last_track.x,axis=0)
positions_y_b1 = np.average(line_b1.record_last_track.y,axis=0)
plt.figure(0)
plt.title("Beam 1 x and y centroids")
plt.plot(np.arange(nTurn),positions_x_b1/np.sqrt(physemit_x*beta_x_IP1),'x', label = 'x mean')
plt.plot(np.arange(nTurn),positions_y_b1/np.sqrt(physemit_y*beta_y_IP1),'x', label = 'y mean')
plt.legend()
plt.figure(1)
plt.title("Beam 1 fft")
freqs = np.fft.fftshift(np.fft.fftfreq(nTurn))
mask = freqs > 0
myFFT = np.fft.fftshift(np.fft.fft(positions_x_b1))
plt.plot(freqs[mask], (np.abs(myFFT[mask])), label = "x")
myFFT = np.fft.fftshift(np.fft.fft(positions_y_b1))
plt.plot(freqs[mask], (np.abs(myFFT[mask])), label = "y")
plt.legend()

positions_x_b2 = np.average(line_b2.record_last_track.x,axis=0)
positions_y_b2 = np.average(line_b2.record_last_track.y,axis=0)
plt.figure(2)
plt.title("Beam 1 x and y centroids")
plt.plot(np.arange(nTurn),positions_x_b2/np.sqrt(physemit_x*beta_x_IP1),'x', label = 'x mean')
plt.plot(np.arange(nTurn),positions_y_b2/np.sqrt(physemit_y*beta_y_IP1),'x', label = 'y mean')
plt.legend()
plt.figure(3)
plt.title("Beam 2 fft")
freqs = np.fft.fftshift(np.fft.fftfreq(nTurn))
mask = freqs > 0
myFFT = np.fft.fftshift(np.fft.fft(positions_x_b1))
plt.plot(freqs[mask], (np.abs(myFFT[mask])), label = "x")
myFFT = np.fft.fftshift(np.fft.fft(positions_y_b1))
plt.plot(freqs[mask], (np.abs(myFFT[mask])), label = "y")


plt.show()